"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MochaAdapter = void 0;
const node_fs_1 = __importDefault(require("node:fs"));
const node_path_1 = __importDefault(require("node:path")); // eslint-disable-line unicorn/import-style
const core_1 = require("@serenity-js/core");
const model_1 = require("@serenity-js/core/lib/model");
/**
 * Allows for programmatic execution of Mocha test scenarios,
 * using [`SerenityReporterForMocha`](https://serenity-js.org/api/mocha/function/export=/) to report progress.
 *
 * ## Learn more
 * - [`TestRunnerAdapter`](https://serenity-js.org/api/core-adapter/interface/TestRunnerAdapter/)
 *
 * @group Integration
 */
class MochaAdapter {
    config;
    loader;
    mocha;
    totalScenarios;
    constructor(config, loader) {
        this.config = config;
        this.loader = loader;
    }
    /**
     * Scenario success threshold for this test runner.
     */
    successThreshold() {
        return this.config.strict
            ? model_1.ExecutionIgnored
            : model_1.ImplementationPending;
    }
    /**
     * Loads test scenarios.
     *
     * @param pathsToScenarios
     */
    async load(pathsToScenarios) {
        const _Mocha = this.loader.require('mocha');
        this.mocha = new _Mocha({
            ...this.config,
            reporter: require.resolve('../index'),
        });
        this.mocha.fullTrace();
        this.mocha.files = pathsToScenarios;
        this.mocha.suite.on('pre-require', (context, file, mocha) => {
            this.requireAny(this.config.require);
        });
        await this.mocha.loadFilesAsync();
        const mochaRunner = new _Mocha.Runner(this.mocha.suite, {
            delay: false,
        });
        if (this.config.grep) {
            mochaRunner.grep(this.mocha.options.grep, this.config.invert);
        }
        this.totalScenarios = mochaRunner.total;
    }
    /**
     * Returns the number of loaded scenarios
     *
     * @throws [`LogicError`](https://serenity-js.org/api/core/class/LogicError/)
     *  If called before `load`
     */
    scenarioCount() {
        if (this.totalScenarios === undefined) {
            throw new core_1.LogicError('Make sure to call `load` before calling `scenarioCount`');
        }
        return this.totalScenarios;
    }
    /**
     * Runs loaded test scenarios.
     *
     * @throws [`LogicError`](https://serenity-js.org/api/core/class/LogicError/)
     *  If called before `load`
     */
    run() {
        return new Promise((resolve, reject) => {
            if (this.mocha === undefined) {
                throw new core_1.LogicError('Make sure to call `load` before calling `run`');
            }
            this.mocha.run(numberOfFailures => resolve());
        });
    }
    requireAny(filesOrModules) {
        const requires = filesOrModules
            ? [].concat(filesOrModules).filter(item => !!item)
            : [];
        requires.forEach(fileOrModule => {
            const required = node_fs_1.default.existsSync(fileOrModule) || node_fs_1.default.existsSync(`${fileOrModule}.js`)
                ? node_path_1.default.resolve(fileOrModule) // local file
                : fileOrModule; // module
            require(required);
        });
    }
}
exports.MochaAdapter = MochaAdapter;
//# sourceMappingURL=MochaAdapter.js.map